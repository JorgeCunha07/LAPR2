package app.controller;

import app.domain.model.Company;
import app.domain.model.Employee;
import app.domain.model.dto.EmployeeDTO;
import pt.isep.lei.esoft.auth.mappers.dto.UserDTO;
import pt.isep.lei.esoft.auth.mappers.dto.UserRoleDTO;

import java.util.List;
import java.util.Optional;


/**
 * It's a controller class that handles the registration of employees
 */
public class RegisterEmployeeController {

    // It's a controller class that handles the registration of employees
    private Company company;
    // It's a variable that contains a list of UserRoleDTO objects.
    private List<UserRoleDTO> rolesList;

    // It's a constructor that initializes the company and rolesList variables.
    public RegisterEmployeeController() {
        company = App.getInstance().getCompany();
        rolesList = company.getUserRoles();
    }

    /**
     * This function returns a password generated by the company.
     *
     * @return A string
     */
    public String generatePassword() {
        return company.generatePassword();
    }


    /**
     * > This function returns a list of UserRoleDTO objects
     *
     * @return A list of UserRoleDTO objects.
     */
    public List<UserRoleDTO> getRolesList() {
        return rolesList;
    }

    /**
     * Create an employee using the company's createEmployee function.
     *
     * @param employeeDTO This is the object that contains the information about the employee that you want to create.
     * @return Employee
     */
    public Employee createEmployee(EmployeeDTO employeeDTO) {
        return company.createEmployee(employeeDTO);
    }


    /**
     * This function saves an employee to the company.
     *
     * @param employee The employee object to be saved.
     * @return A boolean value.
     */
    public boolean saveEmployee(Employee employee) {
        return this.company.saveEmployee(employee);
    }

    /**
     * This function adds a user with a role to the company
     *
     * @param employeeDTO This is the employee object that you want to add to the database.
     * @param userRoleDTO This is a DTO that contains the role of the user.
     * @return A boolean value.
     */
    public String addUserWithRole(EmployeeDTO employeeDTO, UserRoleDTO userRoleDTO) {
        String pass = generatePassword();
        try {
            company.addUserWithRole(employeeDTO, pass , userRoleDTO);
        }catch (Exception e){
            System.out.println("Error on adding the User on the App.");
        }
        return pass;
    }

    /**
     * This function checks if the Citizen card number is already in the list of employees
     *
     * @param ccNumber The Citizen card number to be checked.
     * @return boolean
     */
    public boolean checkCCNumberEmployeeList(String ccNumber) {
        return company.checkCCNumberEmployeeList(ccNumber);
    }
}


